import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.SwingUtilities;
/*
 *  The sign-up popup for the website.
 *  @author Heather N. Larsen
 *  @version    1.1     2018/09/12:17:11
 */
public class SignUpGUI extends javax.swing.JPanel {
    /**
     * Creates new form SignUpGUI
     */
    public SignUpGUI() {
        initComponents();
        
        //Text fields for registration credentials
        this.getUsername.setBorder(BorderFactory.createTitledBorder("Username"));
        this.getEmail.setBorder(BorderFactory.createTitledBorder("Email"));
        this.getPhone.setBorder(BorderFactory.createTitledBorder("Phone (optional)"));
        this.getPassword.setBorder(BorderFactory.createTitledBorder("Password"));
        this.getConfirmPassword.setBorder(BorderFactory.createTitledBorder("Confirm Password"));
        
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createAccount = new javax.swing.JLabel();
        logo = new javax.swing.JLabel();
        getUsername = new javax.swing.JTextField();
        getConfirmPassword = new javax.swing.JPasswordField();
        getPassword = new javax.swing.JPasswordField();
        getEmail = new javax.swing.JTextField();
        getPhone = new javax.swing.JFormattedTextField();
        ToSCheckBox = new javax.swing.JCheckBox();
        signUpButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        errorMessage = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        errorMessage1 = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(230, 230, 230));

        createAccount.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        createAccount.setText("Create Your Heartbleed Account");

        logo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/heartbleed.png"))); // NOI18N
        logo.setMaximumSize(new java.awt.Dimension(341, 413));
        logo.setMinimumSize(new java.awt.Dimension(341, 413));

        getUsername.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getUsername.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        getUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getUsernameActionPerformed(evt);
            }
        });

        getConfirmPassword.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        getPassword.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        getPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getPasswordActionPerformed(evt);
            }
        });

        getEmail.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getEmail.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        getEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getEmailActionPerformed(evt);
            }
        });

        try {
            getPhone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(###)###-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        getPhone.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        getPhone.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getPhoneActionPerformed(evt);
            }
        });

        ToSCheckBox.setText("Check here to indicate that you have read and agree to the Terms of Service.");
        ToSCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToSCheckBoxActionPerformed(evt);
            }
        });

        signUpButton.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        signUpButton.setText("Sign Up");
        signUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signUpButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setBorder(null);

        errorMessage.setEditable(false);
        errorMessage.setBackground(new java.awt.Color(230, 230, 230));
        errorMessage.setColumns(100);
        errorMessage.setForeground(new java.awt.Color(255, 0, 0));
        errorMessage.setLineWrap(true);
        errorMessage.setRows(2);
        errorMessage.setWrapStyleWord(true);
        errorMessage.setAutoscrolls(false);
        errorMessage.setBorder(null);
        errorMessage.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(errorMessage);

        jScrollPane4.setBorder(null);

        errorMessage1.setEditable(false);
        errorMessage1.setBackground(new java.awt.Color(230, 230, 230));
        errorMessage1.setColumns(100);
        errorMessage1.setFont(new java.awt.Font("Poor Richard", 2, 15)); // NOI18N
        errorMessage1.setLineWrap(true);
        errorMessage1.setRows(2);
        errorMessage1.setText("Passwords must be 8-16 characters long and contain:\n                     1   uppercase  character\n                     1   lowercase  character\n                     1   special  character\n                     1   digit");
        errorMessage1.setWrapStyleWord(true);
        errorMessage1.setAutoscrolls(false);
        errorMessage1.setBorder(null);
        errorMessage1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane4.setViewportView(errorMessage1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(getEmail)
                                .addComponent(getUsername)
                                .addComponent(getPhone, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                                .addComponent(getPassword)
                                .addComponent(getConfirmPassword))
                            .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(createAccount))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(signUpButton))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(ToSCheckBox)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(createAccount)
                        .addGap(23, 23, 23)
                        .addComponent(getUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(getEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(getPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(signUpButton))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(ToSCheckBox)
                .addGap(26, 26, 26))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void getUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getUsernameActionPerformed

    }//GEN-LAST:event_getUsernameActionPerformed

    private void getEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getEmailActionPerformed

    }//GEN-LAST:event_getEmailActionPerformed

    private void getPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getPhoneActionPerformed

    }//GEN-LAST:event_getPhoneActionPerformed

    private void getPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getPasswordActionPerformed

    }//GEN-LAST:event_getPasswordActionPerformed

    private void ToSCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToSCheckBoxActionPerformed

    }//GEN-LAST:event_ToSCheckBoxActionPerformed

    private void signUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signUpButtonActionPerformed
        try {
            errorMessage.setText("");
            UserDatabase db = new UserDatabase();
            
            if(checkUsername() && checkPassword() && checkEmail() && checkBox()) {
                String phone = null;
                if(!getPhone.getText().contains(" ")) {
                    phone = getPhone.getText();
                }
                    
                db.registerUser(getUsername.getText(), getPassword.getText(), 
                        getEmail.getText(), phone);
                
                SwingUtilities.getWindowAncestor(this).dispose();
            }
        } catch (IllegalArgumentException iae) {
            errorMessage.setText(iae.getMessage());
        } catch (IOException ex) {
            Logger.getLogger(SignUpGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_signUpButtonActionPerformed

    /**
     *  Checks if the password and confirmed password match.
     *  @return true if both password fields match and not null
     */
    private boolean checkPassword() {
        String password = getPassword.getText();
        
        if(password.compareTo("") == 0) {
            errorMessage.setText("Please enter a password.");
            return false;
        }
        else if(password.compareTo(getConfirmPassword.getText()) == 0) {
            //Password must be min of 8 characters max of 16
            if((8 > password.length()) || (
                    password.length() > 16)) {
                errorMessage.setText("Password must be 8-16 characters long.");
                return false;
            }
            
            boolean upperFlag = false;
            boolean lowerFlag = false;
            boolean numFlag   = false;
            boolean charFlag  = false;
            
            for(int i = 0; i < password.length(); ++i) {
                String sp = "/*!@#$%^&*()\\\"{}_[]|\\\\?/<>,.";
                char ch = password.charAt(i);
                
                if(Character.isUpperCase(ch))             { upperFlag = true; }
                if(Character.isLowerCase(ch))             { lowerFlag = true; }
                if(Character.isDigit(ch))                 { numFlag   = true; }
                if(sp.contains(password.substring(i, i))) { charFlag  = true; }
            }      
            //Password must contain 1 uppercase letter
            if(!upperFlag) {
                errorMessage.setText("Password must contain at least one uppercase letter.");
                return false;
            }
            //Password must contain 1 lowercase letter
            if(!lowerFlag) {
                errorMessage.setText("Password must contain at least one lowercase letter.");
                return false;
            }
            //Password must contain 1 number
            if(!numFlag) {
                errorMessage.setText("Password must contain at least one digit.");
                return false;
            }
            //Password must contain 1 special character
            if(!charFlag) {
                errorMessage.setText("Password must contain at least one special character.");
                return false;
            }
            return true;
        }
        else {
            errorMessage.setText("The entered passwords do not match.");
            return false; 
        }
    }/******************************CHECK.PASSWORD******************************/
    /**
     *  Checks if a username has been entered into the registration field.
     *  @return true if username entered
     */
    private boolean checkUsername() {
        if(getUsername.getText().compareTo("") != 0) { return true; }
        else {
            errorMessage.setText("Please enter a username.");
            return false;
        }
    }/******************************CHECK.USERNAME******************************/
    /**
     *  Checks if an email has been entered and if it is valid.
     *  @return true if email is valid and not already registered
     */
    private boolean checkEmail() throws IOException {
        String email = getEmail.getText();
        
        if(email.contains("@")) { 
            UserDatabase db = new UserDatabase();
            
            if(db.emailExists(email)) {
                errorMessage.setText("This email address has already been registered.");
                return false;
            }
            
            return true;
        }
        else {
            errorMessage.setText("Please enter a valid email. This email will be "+
                    "used for verification and account retrieval.");
            return false;
        }
    }/******************************CHECK.EMAIL*********************************/
    /**
     *  Checks if the user agreed to the ToS via the checkbox.
     *  @return true if checked
     */
    private boolean checkBox() {
        if(ToSCheckBox.isSelected()) { return true; }
        else {
            errorMessage.setText("Please check that you have read and agree to " +
                    "the Terms of Service agreement.");
            return false;
        }
    }/**********************************CHECK.BOX*******************************/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ToSCheckBox;
    private javax.swing.JLabel createAccount;
    private javax.swing.JTextArea errorMessage;
    private javax.swing.JTextArea errorMessage1;
    private javax.swing.JPasswordField getConfirmPassword;
    private javax.swing.JTextField getEmail;
    private javax.swing.JPasswordField getPassword;
    private javax.swing.JFormattedTextField getPhone;
    private javax.swing.JTextField getUsername;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel logo;
    private javax.swing.JButton signUpButton;
    // End of variables declaration//GEN-END:variables
}/********************************SIGN.UP.GUI_CLASS*****************************/